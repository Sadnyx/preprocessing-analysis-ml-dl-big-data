/////////// DOCKER TOOLBOX İLE APACHE NIFI KURULUMU ////////////////////////////

Docker'ı hazır hale getirme
----------------------------------------------
1. docker-machine start default

2. docker-machine env

3. eval $("C:\Program Files\Docker Toolbox\docker-machine.exe" env) 
(Sizinki farklı olabilir. "docker-machine env" komutunun son satırında kendi komutunuzu bulacaksınız)

Docker NiFi Container indirme ve çalıştırma
---------------------------------------------
4.
docker run --name nifi \
-p 9090:9090 \
-d \
-e NIFI_WEB_HTTP_PORT='9090' \
apache/nifi:latest


MongoDB docker container yaratma ve çalıştırma:
----------------------------------------------
5. 
docker run --name mongodb -d \
-p 27017:27017 \
--dns 8.8.8.8 \
mongo


Postgresql container çalıştırma ve iç ip adresini öğrenme, konnektör indirme va container içine taşıma 
-------------------------------------------------------------------------------------------------------
6.  docker container start <postgresql container id>
komutu ile posgresql container çalıştırılır.


7. docker container inspect <postgresql container id>
çıktıdan 
 "IPAddress": "172.17.0.3",
 kısmını bulun ip adresi öğrenilir.
 

8. https://jdbc.postgresql.org/download.html
adresinden 
postgresql-42.2.5.jar
dosyasını indirin 

9. postgresql-42.2.5.jar dosyasını nifi container içine taşıma

docker cp  /c/Users/user/Downloads/postgresql-42.2.5.jar 3aba5ae944b3:/


NiFi arayüzüne erişim 
------------------------
10. browserdan 
192.168.99.107:9090 
adresinden Nifi arayüzüne ulaşabiliriz.
(Sizin ip adresiniz farklı olabilir. Öğrenmek için "docker-machine ls" komutunu kullanınız)


NiFi ConnectionPool oluşturma 
---------------------------------
11.	Nifi arayüzünden postgresql veri tabanı bağlantısı için connection pool oluştur.
	 Ana sayfa -> sol menü configüration (küçük çark) -> controller service tabı -> sağ tarafta + işareti -> DBCPConnectionPool -> Configure
	 
	 İsmini postgresDBCPConnectionPool olarak değiştiriniz.
	 
	Properties tabına:
		Database connection url: jdbc:postgresql://172.17.0.3:5432/spark  (ip numarası docker network ip, yukarıda inspect ile öğrendik)
		Database Driver Class Name: org.postgresql.Driver
		Database Driver Location(s): /postgresql-42.2.5.jar
		Database User: postgres
		Password: postgres
		
Sağ taraftan enable et


Nifi Arayüzünde Veri Akışı Oluşturma
----------------------------------------

1. Nifi arayüzüne git

2. Yukarı menüden bir adet Process Group oluştur. (Sürükle bırak) İsmine postgresToDW verelim.


3. Çift tıklayıp içine girelim.

4. 1'inci Processor QueryDatabaseTable

Add Processor -> QueryDatabaseTable oluştur

	Sağ tıkla -> Configure -> Properties sekmesi

	DatabaseConnectionPoolingService için yukarıda oluşturduğumuz connection poolu seçiyoruz.
	Database Type= Generic
	Table Name = advertising
	Columns to return = Hepsini seçmek istiyorsak boş kalıyor.
	Maximum-value columns = id (incremental bir number olmalı)
	Max Wait time = 0
	Fetch size = 2
	Max rows per flow file = 2
	Output batch size = 2 
	Geri kalan özellikler varsayılan
	

5. 2'nci processor ConvertAvroToJson
	QueryDatabaseTable Processoru'nü ConvertAvroToJson'a bağlıyoruz.
	
6. 3'üncü processor PutMongo 

	sağ tık properties
	Mongo URI: mongodb://172.17.0.4:27017 (ip adresini docker container inspect <mongodbcontainer id>  ile öğrenebilirsiniz)
	Mongo Database Name: test
	Mongo Collection Name: advertising

8. Üç processörü de çalıştır. Nifi Web arayüzünden akışı izle.


9. winpty docker.exe exec -it <mongo container id> mongo
komutu ile mongo shell'e ulaşılır.

10.  use test;
ile test veri tabanı seçilir.

11. show collections;
komutu ile advertising collection görülür.

12. db.advertising.find();
advertising collection içindeki tüm kayıtlar listelenir.

13. DBeaver veya postgres shell üzerinden aşağıdaki kayıtlar advertising tablosuna eklenir.

Dbeaver kullanmıyorsak posgresql shell komutu: " winpty docker.exe exec -it d25235bc5eb2 psql -U postgres spark "

insert into spark.public.advertising values(202, 285.6,62,66.2,75.5)

14. mongo shell üzerinden 
db.advertising.find(); 
tekrar çalıştırılır ve postgres'e girilen kaydın buraya iletildiği görülür.
